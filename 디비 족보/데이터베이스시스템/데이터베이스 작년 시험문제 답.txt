2019 중간고사 [답안완료]

1. 다음 문제들에 O/X로 답하시오. 정답일 경우 2점 가점하고 오답일 경우 2점 감점이 있으므로 신중하게 선택할 것. 비워둘 경우 가점, 감점이 없음. (총 30점)
(1) 3-level architecture의 View level은 데이터베이스의 특정 부분에 국한하여 접근하도록 하는 기능을 제공한다. O
(2) 3-level architecture의 View level에 대한 구조적 변경은 반드시 Logical level에 반영되어야 한다. O
(3) 3-level architecture의 Logical level은 데이터베이스 전체에 걸친 논리적 구조를 기술한다. O

(4) 관계형 데이터 모델 원칙에 입각할 경우 릴레이션(테이블)에서 각 튜플(Row)은 유일성이 보장되어야 한다. o
(5) 관게형 데이터 모델 원칙에 입각할 경우 릴레이션(테이블)의 각 셀은 내부적으로 구조를 가질 수 없다. O
(6) 관계형 데이터 모델 원칙에 입각할 경우 릴레이션(테이블)을 구성하는 속성(Attribute, Column)은 순서를 가진다. X

(7) 테이블을 구성하는 모든 row들은 입력된 순서대로 추출된다. X
(8) 데이터 중복은 데이터 일관성 유지에 도움이 된다. X
(9) 데이터 중복은 일반적으로 조회성능을 향상시킨다. X

(10) 거래(Transaction)가 종료할 때는 거래 진행과정에서 이루어졌던 데이터들에 대한 변경사항들을 디스크에 위치한 데이터베이스에 영속적으로 저장한다. O

(11) 테이블에 Foreign Key가 존재할 경우에는 반드시 1개만 존재하여야 한다. X
(12) 테이블에는 반드시 1개 이상의 Super Key가 존재하여야 한다. O
(13) 테이블의 Primary Key는 1개의 속성으로 구성되어야 한다. X
(14) 테이블의 Foreign Key는 1개의 속성으로 구성되어야 한다. X
(15) 테이블의 Primary Key는 Candidate Key이고 Candidate Key는 Super Key이다. X

2. 강의시간에 설명한 개체무결성 제약조건(Entity Integrity Constraints)의 정의를 기술하시오. 또한, 이를 구현하기 위하여 DBMS는 어떤 기능을 제공하는가.
존재하는 사실은 식별되어야 한다. primary key를 제공한다.

3. 강의시간에 설명한 참조무결성 제약조건(Referential Integrity Constraints)의 정의를 기술하시오. 또한 이를 구현하기 위하여 DBMS는 어떤 기능을 제공하는가.
존재하지 않는 사실은 참조하지 않는다. foreign key를 제공한다.

4. 거래(Transaction)의 원자성(Atomicity)에 대하여 설명하시오.
Transaction은 반드시 commit(완료)이나 rollback(철회)으로만 종료하여야 한다. 즉, 부분적인 완료나 부분적인 철회가 발생하지 않게 종료하여야 한다.

5. 학점 수가 3학점 이상으로 배정된 교과목의 course_id와 title을 검색하는 관계대수식(Relational Algebra Expression)을 작성하시오.
Πcourse_id, title(σcredits = 3(course))

6. 2019학년도에 개설된 강좌의 course_id와 title을 검색하는 관계대수식(Relational Algebra Expression)을 작성하시오. 단, Join 대신 Cartesian Product 연산자 'X'를 사용하시오.
Πcourse_id, title(σcourse.course_id = teaches.course_id(σyear = 2019(course X teaches))

7. 'English' 학과에 소속된 교수들이 2019학년도에 맡았던 강좌들의 course_id들을 검색하는 관계대수식(Relational Algebra Expression)을 작성하시오. 단, join 대신 cartesian Product 연산자를 사용하시오.
Πcourse_id(σinstructor.course_id = teaches.course_id(σdept_name = 'English'(σyear = 2019(instructor, teaches))))

8. 예산(budget)이 100,000을 초과하는 학과의 학과명과 운영건물명을 검색하는 SQL을 작성하시오.
select dept_name, building
from department
where budget > 100000

9. 학과별로 연봉(salary)이 100,000 이상인 교수들의 수와 이들의 평균연봉을 검색하는 SQL을 작성하시오.
select dept_name, count(*) as cnt, avg(salary) as avg
from instructor
where salary >= 100000
group by dept_name

10. 학과별로 지금까지 개설한 강좌수를 파악하는 SQL을 작성하시오. 단, nested SQL을 사용하는 대신 cartesian product를 사용하시오.
select dept_name, count(*) as cnt
from section, course
where section.course_id = course.course_id
group by dept_name

11. 교과목명 'Graph Theory'의 선수교과목 ID를 검색하는 SQL을 작성하시오. 단, nested SQL을 사용하는 대신 cartesian product를 사용하시오.
select prereq_id
from course, prereq
where course.course_id = prereq.course_id and course.title = 'Graph Theory'

12. 2010년도부터 2019년도까지 한 번도 강의를 맡지 않은 교수들의 수와 이들의 평균연봉을 학과별로 파악하는 SQL을 작성하시오. BETWEEN 기능과 nested SQL의 NOT IN 기능을 이용하시오.
select dept_name, count(*) as cnt, avg(salary) as avg
from instructor
where ID not in (select ID
                      from teaches
                      where year between 2010 and 2019)
group by dept_name

13. 2017년도부터 2019년도까지의 기간 동안에는 'English' 학과에서 운영하는 교과목들의 강좌들만 이수한 학생들의 이름과 소속학과를 검색하는 SQL을 작성하시오. 단, EXCEPT 기능과 nested SQL의 NOT EXISTS 기능을 이용하여 작성하시오. 범위검색을 위해서는 BETWEEN을 이용하시오. 강좌를 이수하였다는 것은 해당강좌 이수상황(takes 테이블)에서 grade가 null이 아니고 'F'도 아니라는 의미임.
select distinct S.name, S.dept_name
from student as S
where not exists((select section.course_id
                       from section, course
                       where section.course_id = course.course_id and 
                       year between 2009 and 2011 and dept_name = 'Biology')
                      except
                      (select T.course_id
                       from takes as T
                       where S.ID = T.ID and T.grade <> 'F' and T.grade is not null))

14. Biology 학과에 소속된 모든 교수들보다 더 많은 연봉을 받고 있는 교수의 소속학과와 성명을 검색하는 SQL을 작성하시오. 단, nested SQL의 SOME/ALL 기능을 이용하시오.
select dept_name, name
from instructor
where salary > all (select salary
                        from instructor
                        where dept_name = 'Biology')

15. 최초 수강등록하는 시점에서 이수상황을 제공하는 takes 테이블의 grade 컬럼은 null을 가진다. 학기가 종료된 후 성적을 부여하면 grade 컬럼은 'A', 'B', 'C', 'D', 'F' 중 하나를 가진다. 2019년도 봄학기에 수강하였던 강좌들 가운데 아직 성적을 부여 받지 못한 강좌들의 수가 2개를 초과하는 학생들의 ID와 그런 (아직 성적을 부여 받지 못한) 강좌들의 수를 학생ID 별로 파악하는 SQL을 작성하시오. 당연한 것이지만 한 학생이 한 학기에 동일한 교과목에 대하여 2개 이상의 분반 강좌를 수강하지 못한다.
select S.ID, count(*) as cnt
from student as S, takes as T
where S.ID = T.ID and T.year = 2019 and T.semester = 'Spring' and T.grade is null
group by S.ID