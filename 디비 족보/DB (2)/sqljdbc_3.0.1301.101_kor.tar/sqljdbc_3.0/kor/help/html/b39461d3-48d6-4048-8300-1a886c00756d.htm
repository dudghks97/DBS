<html DIR="LTR" xmlns:tool="http://www.microsoft.com/tooltip" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>고급 데이터 형식 사용</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/script.js">
      
    </script><script src="../local/script_main.js">&amp;nbsp;</script>
  </head>
  <body>
    <!--Topic built:04/01/2010 05:03:28-->

    
    
    
    
    
    
    
    
    
    <div id="header">
      <table width="100%" id="topTable"><tr>
          <td align="left">
            <span id="headerBold">고급 데이터 형식 사용</span>
          </td>
          <td align="right">
            
          </td>
        </tr></table>
      
      
      
    </div>
    <div id="mainSection">
      
        
        
    <font color="DarkGray">
      
    </font>
    <p />
    
    <p />
  
        <div id="introductionSection" class="section">
    <p>Microsoft SQL Server JDBC 드라이버는 JDBC 고급 데이터 형식을 사용하여 SQL Server 데이터 형식을 Java 프로그래밍 언어가 인식할 수 있는 형식으로 변환합니다. </p>
    <p>다음 표에서는 고급 SQL Server, JDBC 및 Java 프로그래밍 언어 데이터 형식 간의 기본 매핑을 나열합니다.</p>
    <table width="100%" cellspacing="0" cellpadding="0" border="1" style="background-color: #CCCCCC;"><tr>
          <th colspan="">
            SQL Server 형식
          </th>
          <th colspan="">
            JDBC 형식(java.sql.Types)
          </th>
          <th colspan="">
            Java 언어 형식
          </th>
        </tr><tr>
        <td colspan="">
          <p>varbinary(max)</p>
          <p>image</p>
        </td>
        <td colspan="">
          <p>LONGVARBINARY</p>
        </td>
        <td colspan="">
          <p>byte[](기본값), Blob, InputStream, String</p>
        </td>
      </tr><tr>
        <td colspan="">
          <p>text</p>
          <p>varchar(max)</p>
        </td>
        <td colspan="">
          <p>LONGVARCHAR</p>
        </td>
        <td colspan="">
          <p>String(기본값), Clob, InputStream</p>
        </td>
      </tr><tr>
        <td colspan="">
          <p>ntext</p>
          <p>nvarchar(max)</p>
        </td>
        <td colspan="">
          <p>LONGVARCHAR</p>
          <p>LONGNVARCHAR(Java SE 6.0)</p>
        </td>
        <td colspan="">
          <p>String(기본값), Clob, NClob(Java SE 6.0)</p>
        </td>
      </tr><tr>
        <td colspan="">
          <p>xml</p>
        </td>
        <td colspan="">
          <p>LONGVARCHAR</p>
          <p>SQLXML(Java SE 6.0)</p>
        </td>
        <td colspan="">
          <p>String(기본값), InputStream, Clob, byte[],Blob, SQLXML(Java SE 6.0)</p>
        </td>
      </tr><tr>
        <td colspan="">
          <p>udt</p>
        </td>
        <td colspan="">
          <p>VARBINARY</p>
        </td>
        <td colspan="">
          <p>String(기본값), byte[], InputStream</p>
        </td>
      </tr></table>
    <p>다음 섹션에서는 JDBC 드라이버와 고급 데이터 형식을 사용하는 방법의 예를 보여 줍니다.</p>
  </div><h1 class="heading">BLOB, CLOB 및 NCLOB 데이터 형식</h1><div id="sectionSection0" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <p xmlns="">JDBC 드라이버는 java.sql.Blob, java.sql.Clob 및 java.sql.NClob 인터페이스의 모든 메서드를 구현합니다. </p>
      <div style="margin: .5em 1.5em .5em 1.5em" xmlns=""><b>참고: </b>
        CLOB 값은 SQL Server 2005 이상의 큰 값 데이터 형식과 함께 사용할 수 있습니다. 특히 CLOB 형식은 <b>varchar(max)</b> 및 <b>nvarchar(max)</b> 데이터 형식과 함께 사용할 수 있고, BLOB 형식은 <b>varbinary(max)</b> 및 <b>image</b> 데이터 형식과 함께 사용할 수 있으며, NCLOB 형식은 <b>ntext</b> 및 <b>nvarchar(max)</b> 데이터 형식과 함께 사용할 수 있습니다.<p />
      </div>
    </content></div><h1 class="heading">큰 값 데이터 형식</h1><div id="sectionSection1" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <p xmlns="">SQL Server의 이전 버전에서는 큰 값 데이터 형식을 사용할 때 특별한 처리가 필요했습니다. 큰 값 데이터 형식은 최대 행 크기인 8KB를 초과하는 데이터 형식입니다. SQL Server에서는 <b>varchar</b>, <b>nvarchar</b> 및 <b>varbinary</b> 데이터 형식에 대해 최대값 지정자를 사용하여 값을 최대 2^31바이트까지 저장할 수 있습니다. 테이블 열 및 Transact-SQL 변수는 <b>varchar(max)</b>, <b>nvarchar(max)</b> 또는 <b>varbinary(max)</b> 데이터 형식을 지정할 수 있습니다.</p>
      <p xmlns="">큰 값 형식을 사용하는 주요 시나리오는 큰 값 형식을 데이터베이스에서 검색하거나 데이터베이스에 추가하는 것입니다. 다음 섹션에서는 이러한 태스크를 수행하는 다양한 접근 방식에 대해 설명합니다.</p>
    </content><sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h1 class="heading" xmlns="">데이터베이스에서 큰 값 형식 검색</h1><div id="sectionSection" class="section" xmlns=""><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <p xmlns=""><b>varchar(max)</b> 데이터 형식과 같이 이진이 아닌 큰 값 데이터 형식을 데이터베이스에서 검색할 때 사용할 수 있는 한 가지 방법은 해당 데이터를 문자 스트림으로 읽는 것입니다. 다음 예제에서는 <a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a> 클래스의 <a href="599cf463-e19f-4baa-bacb-513cad7c6cd8.htm">executeQuery</a> 메서드를 사용하여 데이터베이스에서 데이터를 검색하고 이를 결과 집합으로 반환합니다. 그런 다음 <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> 클래스의 <a href="c70e210f-0288-47cc-9268-a29c45979729.htm">getCharacterStream</a> 메서드를 사용하여 결과 집합에서 큰 값 데이터를 읽습니다.</p>
          <div class="sampleCode" xmlns=""><span codeLanguage="other"><pre>ResultSet rs = stmt.executeQuery("SELECT TOP 1 * FROM Test1");
rs.next();
Reader reader = rs.getCharacterStream(2);</pre></span></div>
          <div style="margin: .5em 1.5em .5em 1.5em" xmlns=""><b>참고: </b>
            <b>text</b>, <b>ntext</b> 및 <b>nvarchar(max)</b> 데이터 형식에도 같은 방법을 사용할 수 있습니다.<p />
          </div>
          <p xmlns=""><b>varbinary(max)</b> 데이터 형식과 같은 이진 큰 값 데이터 형식을 데이터베이스에서 검색할 때 사용할 수 있는 방법에는 몇 가지가 있습니다. 가장 효율적인 방법은 다음과 같이 데이터를 이진 스트림으로 읽는 것입니다.</p>
          <div class="sampleCode" xmlns=""><span codeLanguage="other"><pre>ResultSet rs = stmt.executeQuery("SELECT photo FROM mypics");
rs.next();
InputStream is = rs.getBinaryStream(2);</pre></span></div>
          <p xmlns="">또한 다음과 같이 <a href="d16a0aea-6144-4fcb-bcbc-5d7daa36d327.htm">getBytes</a> 메서드를 사용하여 데이터를 바이트 배열로 읽을 수도 있습니다.</p>
          <div class="sampleCode" xmlns=""><span codeLanguage="other"><pre>ResultSet rs = stmt.executeQuery("SELECT photo FROM mypics");
rs.next();
byte [] b = rs.getBytes(2);</pre></span></div>
          <div style="margin: .5em 1.5em .5em 1.5em" xmlns=""><b>참고: </b>
            뿐만 아니라 데이터를 BLOB로 읽는 방법도 있습니다. 그러나 이 방법은 앞의 두 방법에 비해 효율이 떨어집니다.<p />
          </div>
        </content></div>
      <h1 class="heading" xmlns="">데이터베이스에 큰 값 데이터 형식 추가</h1><div id="sectionSection" class="section" xmlns=""><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <p xmlns="">JDBC 드라이버로 큰 데이터를 업로드할 때 메모리 크기의 작업인 경우 원활하게 수행되지만 메모리 크기를 초과하는 작업의 경우에는 스트리밍이 최선의 수단입니다. 그러나 큰 데이터를 업로드하는 가장 효율적인 방법은 스트림 인터페이스를 사용하는 것입니다.</p>
          <p xmlns="">다음과 같이 문자열 또는 바이트를 사용하는 것도 한 가지 방법입니다.</p>
          <div class="sampleCode" xmlns=""><span codeLanguage="other"><pre>PreparedStatement pstmt = con.prepareStatement("INSERT INTO test1 (c1_id, c2_vcmax) VALUES (?, ?)");
pstmt.setInt(1, 1);
pstmt.setString(2, htmlStr);
pstmt.executeUpdate();</pre></span></div>
          <div style="margin: .5em 1.5em .5em 1.5em" xmlns=""><b>참고: </b>
            이 방법은 <b>text</b>, <b>ntext</b> 및 <b>nvarchar(max)</b> 열에 저장된 값에도 사용할 수 있습니다.<p />
          </div>
          <p xmlns="">서버에 이미지 라이브러리가 있는데 전체 이진 이미지 파일을 <b>varbinary(max)</b> 열에 업로드해야 하는 경우 JDBC 드라이버를 사용하는 가장 효율적인 방법은 다음과 같이 스트림을 직접 사용하는 것입니다.</p>
          <div class="sampleCode" xmlns=""><span codeLanguage="other"><pre>PreparedStatement pstmt = con.prepareStatement("INSERT INTO test1 (Col1, Col2) VALUES(?,?)");
File inputFile = new File("CLOBFile20mb.jpg");
FileInputStream inStream = new FileInputStream(inputFile);
int id = 1;
pstmt.setInt(1,id);
pstmt.setBinaryStream(2, inStream);
pstmt.executeUpdate();
inStream.close();</pre></span></div>
          <div style="margin: .5em 1.5em .5em 1.5em" xmlns=""><b>참고: </b>
            CLOB 또는 BLOB 메서드 중 하나를 사용하는 방법은 큰 데이터를 업로드하는 데는 적합하지 않습니다.<p />
          </div>
        </content></div>
      <h1 class="heading" xmlns="">데이터베이스에서 큰 값 데이터 형식 수정</h1><div id="sectionSection" class="section" xmlns=""><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <p xmlns="">대개의 경우 데이터베이스의 큰 값을 업데이트하거나 수정할 때 권장되는 방법은 UPDATE, WRITE 및 SUBSTRING과 같은 Transact-SQL 명령을 사용하여 <a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> 및 <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a> 클래스를 통해 매개 변수를 전달하는 것입니다.</p>
          <p xmlns="">보관된 HTML 파일처럼 큰 텍스트 파일에서 단어의 인스턴스를 바꾸려면 다음과 같이 <b>Clob</b> 개체를 사용합니다.</p>
          <div class="sampleCode" xmlns=""><span codeLanguage="other"><pre>String SQL = "SELECT * FROM test1;";
Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
ResultSet rs = stmt.executeQuery(SQL);
rs.next();

Clob clob = rs.getClob(2);
long pos = clob.position("dog", 1);
clob.setString(pos, "cat");
rs.updateClob(2, clob);
rs.updateRow();</pre></span></div>
          <p xmlns="">또한 서버에서 모든 작업을 수행하고 준비된 UPDATE 문에 매개 변수만 전달하는 방법도 있습니다.</p>
          <p xmlns="">큰 값 형식에 대한 자세한 내용은 SQL Server 온라인 설명서의 "큰 값 형식 사용"을 참조하십시오.</p>
        </content></div>
    </sections></div><h1 class="heading">XML 데이터 형식</h1><div id="sectionSection2" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <p xmlns="">
        SQL Server는 XML 문서와 조각을 SQL Server 데이터베이스에 저장할 수 있도록 하는 <b>xml</b> 데이터 형식을 제공합니다. <b>xml</b> 데이터 형식은 SQL Server의 기본 제공 데이터 형식이며 <b>int</b> 및 <b>varchar</b>와 같은 다른 기본 제공 유형과 비슷합니다. 다른 기본 제공 유형과 마찬가지로 변수 유형, 매개 변수 유형, 함수 반환 유형 또는 Transact-SQL CAST 및 CONVERT 함수로 테이블을 만들 때 <b>xml</b> 데이터 형식을 열 유형으로 사용할 수 있습니다.</p>
      <p xmlns="">JDBC 드라이버에서 <b>xml</b> 데이터 형식은 문자열, 바이트 배열, 스트림, CLOB, BLOB 또는 SQLXML 개체로 매핑될 수 있습니다. 기본값은 문자열입니다. JDBC 드라이버 버전 2.0 이상에서는 SQLXML 인터페이스가 추가된 JDBC 4.0 API가 지원됩니다. SQLXML 인터페이스는 XML 데이터에 대한 상호 작용 및 조작을 수행하는 메서드를 정의합니다. <b>SQLXML</b> 데이터 형식은 SQL Server <b>xml</b> 데이터 형식에 매핑됩니다. <b>SQLXML</b> Java 데이터 형식으로 관계형 데이터베이스에서 XML 데이터를 읽고 쓰는 방법은 <a href="32b7217e-1f0c-473d-9a45-176daa81584e.htm">XML 데이터 지원</a>을 참조하십시오. </p>
      <p xmlns="">JDBC 드라이버의 <b>xml</b> 데이터 형식 구현에서는 다음을 지원합니다.</p>
      <ul xmlns=""><li>
          가장 일반적인 프로그래밍 시나리오에서 표준 Java UTF-16 문자열로 XML에 액세스합니다.<br />
        </li><li>
          UTF-8 및 다른 8비트 인코딩 XML 입력을 지원합니다.<br />
        </li><li>
          다른 XML 프로세서 및 디스크 파일과의 교환을 위해 UTF-16으로 인코딩된 경우 선행 BOM이 있는 바이트 배열로 XML에 액세스합니다.<br />
        </li></ul>
      <p xmlns="">
        SQL Server에서는 UTF-16으로 인코딩된 XML에 선행 BOM을 사용해야 합니다. XML 매개 변수 값이 바이트 배열로 제공되면 응용 프로그램에서 선행 BOM을 제공해야 합니다. SQL Server에서는 항상 BOM이나 포함된 인코딩 선언 없이 XML 값을 UTF-16 문자열로 출력합니다. XML 값을 byte[], BinaryStream 또는 BLOB로 검색하면 UTF-16 BOM이 값 앞에 붙습니다.</p>
      <p xmlns=""><b>xml</b> 데이터 형식에 대한 자세한 내용은 SQL Server 온라인 설명서에서 "xml 데이터 형식"을 참조하십시오.</p>
    </content></div><h1 class="heading">사용자 정의 데이터 형식</h1><div id="sectionSection3" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <p xmlns="">SQL Server 2005에서는 UDT(사용자 정의 형식)를 도입하여 SQL Server 데이터베이스에 개체 및 사용자 지정 데이터 구조를 저장할 수 있도록 함으로써 SQL 형식 체계를 확장했습니다. UDT는 다중 데이터 형식과 동작이 포함될 수 있어 단일 SQL Server 시스템 데이터 형식으로 구성된 일반적인 별칭 데이터 형식과 차별화됩니다. UDT는 검증할 수 있는 코드를 생성하는 Microsoft .NET CLR(공용 언어 런타임)에서 지원하는 언어를 사용하여 정의합니다. 이러한 언어에는 Microsoft Visual C# 및 Visual Basic .NET 등이 있습니다. 데이터는 .NET Framework 기반 클래스 또는 구조의 필드와 속성으로 노출되며 동작은 클래스 또는 구조의 메서드로 정의됩니다. </p>
      <p xmlns="">SQL Server에서는 UDT를 테이블의 열 정의, Transact-SQL 일괄 작업의 변수 또는 Transact-SQL 함수나 저장 프로시저의 인수로 사용할 수 있습니다.</p>
      <p xmlns="">사용자 정의 데이터 형식에 대한 자세한 내용은 SQL Server 온라인 설명서의 "사용자 정의 형식 인스턴스 사용 및 수정"을 참조하십시오.</p>
    </content></div><span id="seeAlsoSpan"><h1 class="heading">참고 항목</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection"><a href="7802328d-4d23-4775-9573-4169b127d258.htm">JDBC 드라이버 데이터 형식 이해</a><br /><br /></div><!--[if gte IE 5]>
			<tool:tip element="seeAlsoToolTip" avoidmouse="false"/><tool:tip element="languageFilterToolTip" avoidmouse="false"/><tool:tip element="roleInfoSpan" avoidmouse="false"/>
		<![endif]-->
      <div id="footer" class="section">
        
		<hr />
		
		<span id="fb" class="feedbackcss">
			
			
		</span>
		
		<a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">
			
			© 2010 Microsoft Corporation. 모든 권리 보유.
		</a>
 	
	
      </div>
    </div>
  </body>
</html>