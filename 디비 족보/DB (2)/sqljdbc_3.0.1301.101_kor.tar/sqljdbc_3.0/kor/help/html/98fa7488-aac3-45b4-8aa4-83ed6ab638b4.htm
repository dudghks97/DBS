<html DIR="LTR" xmlns:tool="http://www.microsoft.com/tooltip" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>데이터 형식 변환 이해</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/script.js">
      
    </script><script src="../local/script_main.js">&amp;nbsp;</script>
  </head>
  <body>
    <!--Topic built:04/01/2010 05:03:28-->

    
    
    
    
    
    
    
    
    
    <div id="header">
      <table width="100%" id="topTable"><tr>
          <td align="left">
            <span id="headerBold">데이터 형식 변환 이해</span>
          </td>
          <td align="right">
            
          </td>
        </tr></table>
      
      
      
    </div>
    <div id="mainSection">
      
        
        
    <font color="DarkGray">
      
    </font>
    <p />
    
    <p />
  
        <div id="introductionSection" class="section">
    <p>Java 프로그래밍 언어 데이터 형식을 SQL Server 데이터 형식으로 손쉽게 변환하기 위해 Microsoft SQL Server JDBC 드라이버는 JDBC 사양에서 요구하는 데이터 형식 변환 기능을 제공합니다. 이 기능은 모든 형식을 <b>Object</b>, <b>String</b> 및 <b>byte[]</b> 데이터 형식으로 서로 자유롭게 변환할 수 있어 유연성이 뛰어납니다. </p>
  </div><h1 class="heading">Getter 메서드 변환</h1><div id="sectionSection0" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <p xmlns="">다음 차트에는 SQL Server 데이터 형식을 기반으로 하는 <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> 클래스의 <b>get&lt;Type&gt;()</b> 메서드에 대한 JDBC 드라이버의 변환 맵과 <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a> 클래스의 <b>get&lt;Type&gt;</b> 메서드에서 지원되는 변환 등이 나와 있습니다.</p>
      <div xmlns=""><img src="../local/a01384f7-3912-4a57-beca-eb876955c6f6.gif" target="_blank" alt="JDBCGetterConversions" /></div>
      <p xmlns="">다음은 JDBC 드라이버의 getter 메서드에서 지원하는 세 가지 변환 범주입니다.</p>
      <ul xmlns=""><li>
          
            <b>비손실(x)</b>: getter 형식이 원본 서버 유형과 동일하거나 작은 경우의 변환입니다. 예를 들어, 원본 서버 10진수 열에 대해 <b>getBigDecimal</b>을 호출하는 경우는 변환이 필요하지 않습니다.<br />
        </li><li>
          
            <b>변환(y)</b>: 변환이 일반적이고 Java 언어 변환 규칙을 따르는 경우 숫자 서버 유형을 Java 언어 형식으로 변환하는 것입니다. 이러한 변환의 경우 항상 전체 자릿수가 잘리고(반올림하지 않음) 오버플로는 좀 더 작은 대상 유형의 모듈로 처리합니다. 예를 들어, 값이 "1.9999"인 원본 <b>decimal</b> 열에 대해 <b>getInt</b>를 호출하면 "1"을 반환하거나 원본 <b>decimal</b> 값이 "3000000000"인 경우 <b>int</b> 값은 "-1294967296"으로 오버플로 오류가 발생합니다.<br />
        </li><li>
          
            <b>데이터 의존(z)</b>: 원본 문자 형식에서 숫자 형식으로 변환하려면 문자 형식에 해당 형식으로 변환할 수 있는 값이 있어야 합니다. 그 외 다른 변환은 수행되지 않습니다. getter 형식에 비해 너무 큰 값은 잘못된 값입니다. 예를 들어, "53"이 들어있는 varchar(50) 열에 대해 <b>getInt</b>를 호출하면 값은 <b>int</b>로 반환됩니다. 하지만 원본 값이 "xyz" 또는 "3000000000"인 경우에는 오류가 발생합니다.<br />
        </li></ul>
      <p xmlns=""><b>binary</b>, <b>varbinary</b>, <b>varbinary(max)</b> 또는 <b>image</b> 열 데이터 형식에 대해 <b>getString</b>을 호출한 경우 값은 16진수 문자열 값으로 반환됩니다.</p>
    </content></div><h1 class="heading">Updater 메서드 변환</h1><div id="sectionSection1" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <p xmlns=""><a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> 클래스의 <b>update&lt;Type&gt;()</b> 메서드에 전달되는 Java 형식 데이터의 경우 다음 변환이 적용됩니다.</p>
      <div xmlns=""><img src="../local/104cb32d-a90c-4bcb-97de-e6907a0efe99.gif" target="_blank" alt="JDBCUpdaterConversions" /></div>
      <p xmlns="">다음은 JDBC 드라이버의 updater 메서드에서 지원하는 세 가지 변환 범주입니다.</p>
      <ul xmlns=""><li>
          
            <b>비손실(x)</b>: updater 형식이 원본 서버 유형과 동일하거나 작은 경우의 변환입니다. 예를 들어, 원본 서버 10진수 열에 대해 <b>updateBigDecimal</b>을 호출하는 경우는 변환이 필요하지 않습니다.<br />
        </li><li>
          
            <b>변환(y)</b>: 변환이 일반적이고 Java 언어 변환 규칙을 따르는 경우 숫자 서버 유형을 Java 언어 형식으로 변환하는 것입니다. 이러한 변환의 경우 항상 전체 자릿수가 잘리고(반올림하지 않음) 오버플로는 좀 더 작은 대상 유형의 모듈로로 처리됩니다. 예를 들어, 값이 "1.9999"인 원본 <b>int</b> 열에 대해 <b>updateDecimal</b>을 호출하면 "1"이 반환되고 원본 <b>decimal</b> 값이 "3000000000"인 경우 <b>int</b> 값은 "-1294967296"으로 오버플로가 발생합니다.<br />
        </li><li>
          
            <b>데이터 의존(z)</b>: 원본 데이터 형식에서 대상 데이터 형식으로 변환하려면 포함된 값을 대상 형식으로 변환할 수 있어야 합니다. 그 외 다른 변환은 수행되지 않습니다. getter 형식에 비해 너무 큰 값은 잘못된 값입니다. 예를 들어, "53"이 들어있는 int 열에 대해 <b>updateString</b>을 호출하면 업데이트가 성공합니다. 하지만 원본 문자열 값이 "foo" 또는 "3000000000"인 경우에는 오류가 발생합니다.<br />
        </li></ul>
      <p xmlns=""><b>binary</b>, <b>varbinary</b>, <b>varbinary(max)</b> 또는 <b>image</b> 열 데이터 형식에 대해 <b>updateString</b>을 호출한 경우 문자열 값은 16진수 문자열 값으로 처리됩니다.</p>
      <p xmlns="">SQL Server 열 데이터 형식이 <b>XML</b>인 경우 데이터 값은 올바른 <b>XML</b>이어야 합니다. <b>updateBytes</b>, <b>updateBinaryStream</b> 또는 <b>updateBlob</b> 메서드를 호출하는 경우 데이터 값은 XML 문자의 16진수 문자열 표현이어야 합니다. 예를 들면 다음과 같습니다. </p>
      <div class="sampleCode" xmlns=""><span codeLanguage="other"><pre>&lt;hello&gt;world&lt;/hello&gt; = 0x3C68656C6C6F3E776F726C643C2F68656C6C6F3E </pre></span></div>
      <p xmlns="">XML 문자가 특정 문자 인코딩을 사용하는 경우에는 BOM(바이트 순서 표시)이 필요합니다.</p>
    </content></div><h1 class="heading">Setter 메서드 변환</h1><div id="sectionSection2" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <p xmlns=""><a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> 클래스 및 <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a> 클래스의 <b>set&lt;Type&gt;()</b> 메서드에 전달되는 Java 형식 데이터에 대해서는 다음과 같은 변환이 적용됩니다.</p>
      <div xmlns=""><img src="../local/fe289363-9e70-4c8d-88bc-51e959ed9755.gif" target="_blank" alt="JDBCSetterConversions" /></div>
      <p xmlns="">서버는 변환을 시도하고 실패하면 오류를 반환합니다.</p>
      <p xmlns=""><b>String</b> 데이터 형식의 경우 값이 <b>VARCHAR</b> 길이를 초과하면 <b>LONGVARCHAR</b>에 매핑되며 마찬가지로 <b>NVARCHAR</b>는 값이 <b>NVARCHAR</b>에서 지원하는 길이를 초과하면 <b>LONGNVARCHAR</b>에 매핑됩니다. <b>byte[]</b>의 경우도 마찬가지입니다. 값이 <b>VARBINARY</b>보다 길면 <b>LONGVARBINARY</b>가 됩니다.</p>
      <p xmlns="">다음은 JDBC 드라이버의 setter 메서드에서 지원하는 두 가지 변환 범주입니다.</p>
      <ul xmlns=""><li>
          
            <b>비손실(x)</b>: setter 형식이 원본 서버 유형과 동일하거나 작은 경우의 숫자 변환입니다. 예를 들어, 원본 서버 <b>decimal</b> 열에 대해 <b>setBigDecimal</b>을 호출하는 경우는 변환이 필요하지 않습니다. 숫자에서 문자로 변환하는 경우에는 <b>numeric</b> 숫자 데이터 형식이 <b>String</b>으로 변환됩니다. 예를 들어 varchar(50) 열에 값 "53"으로 <b>setDouble</b>을 호출하면 해당 대상 열에 문자 값 "53"이 생성됩니다.<br />
        </li><li>
          
            <b>변환(y)</b>: Java <b>numeric</b> 형식을 보다 작은 원본 서버 <b>numeric</b> 형식으로 변환하는 것입니다. 이 변환은 일반적이며 SQL Server 변환 규칙을 따릅니다. 또한 전체 자릿수는 항상 잘리고(반올림되지 않음) 오버플로가 발생하면 지원되지 않는 변환 오류가 발생합니다. 예를 들어, 원본 정수 열에 대해 "1.9999" 값으로 <b>updateDecimal</b>을 사용하면 대상 열 값이 "1"이 됩니다. 하지만 "3000000000"을 전달하면 드라이버에서 오류가 발생합니다.<br />
        </li><li>
          
            <b>데이터 의존(z)</b>: Java <b>String</b> 유형을 원본 SQL Server 데이터 형식으로 변환하는 경우 드라이버는 <b>String</b> 값을 SQL Server로 전달하고 SQL Server는 필요한 경우 변환을 수행합니다. <b>sendStringParametersAsUnicode</b>가 true로 설정되어 있고 원본 SQL Server 데이터 형식이 <b>image</b>인 경우 SQL Server는 <b>nvarchar</b>에서 <b>image</b>로의 변환을 허용하지 않으며 <b>SQLServerException</b>이 발생합니다. sendStringParametersAsUnicode가 false로 설정되어 있고 원본 SQL Server 데이터 형식이 <b>image</b>인 경우 SQL Server는 <b>varchar</b>에서 <b>image</b>로의 변환을 허용하며 예외가 발생하지 않습니다.<br />
        </li></ul>
      <p xmlns="">
        SQL Server는 변환을 수행하고 문제가 발생하면 JDBC 드라이버에 오류를 전달합니다.</p>
      <p xmlns="">SQL Server 열 데이터 형식이 <b>XML</b>인 경우 데이터 값은 올바른 <b>XML</b>이어야 합니다. <b>updateBytes</b>, <b>updateBinaryStream</b> 또는 <b>updateBlob</b> 메서드를 호출하는 경우 데이터 값은 XML 문자의 16진수 문자열 표현이어야 합니다. 예를 들면 다음과 같습니다. </p>
      <div class="sampleCode" xmlns=""><span codeLanguage="other"><pre>&lt;hello&gt;world&lt;/hello&gt; = 0x3C68656C6C6F3E776F726C643C2F68656C6C6F3E </pre></span></div>
      <p xmlns="">XML 문자가 특정 문자 인코딩을 사용하는 경우에는 BOM(바이트 순서 표시)이 필요합니다.</p>
    </content></div><h1 class="heading">setObject에서의 변환</h1><div id="sectionSection3" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <p xmlns=""><a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> 클래스의 <b>setObject(&lt;Type&gt;)</b> 메서드에 전달되는 Java 형식 데이터에 대해서는 다음과 같은 변환이 적용됩니다. </p>
      <div xmlns=""><img src="../local/92cdf5f9-afdf-4a92-b1ea-204a7d93b8a5.gif" target="_blank" alt="JDBCSetObjectConversions" /></div>
      <p xmlns="">대상 유형을 지정하지 않은 <b>setObject</b> 메서드는 기본 매핑을 사용합니다. <b>String</b> 데이터 형식의 경우 값이 <b>VARCHAR</b> 길이를 초과하면 <b>LONGVARCHAR</b>에 매핑되며 마찬가지로 <b>NVARCHAR</b>는 값이 <b>NVARCHAR</b>에서 지원하는 길이를 초과하면  <b>LONGNVARCHAR</b>에 매핑됩니다. <b>byte[]</b>의 경우도 마찬가지입니다. 값이 <b>VARBINARY</b>보다 길면 <b>LONGVARBINARY</b>가 됩니다.</p>
      <p xmlns="">다음은 JDBC 드라이버의 setObject 메서드에서 지원하는 세 가지 변환 범주입니다.</p>
      <ul xmlns=""><li>
          
            <b>비손실(x)</b>: setter 형식이 원본 서버 유형과 동일하거나 작은 경우의 숫자 변환입니다. 예를 들어, 원본 서버 <b>decimal</b> 열에 대해 <b>setBigDecimal</b>을 호출하는 경우는 변환이 필요하지 않습니다. 숫자에서 문자로 변환하는 경우에는 <b>numeric</b> 숫자 데이터 형식이 <b>String</b>으로 변환됩니다. 예를 들어, 값이 "53"인 varchar(50) 열에 <b>setDouble</b>을 호출하면 해당 대상 열에 문자 값 "53"이 생성됩니다.<br />
        </li><li>
          
            <b>변환(y)</b>: Java <b>numeric</b> 형식을 보다 작은 원본 서버 <b>numeric</b> 형식으로 변환하는 것입니다. 이 변환은 일반적이며 SQL Server 변환 규칙을 따릅니다. 또한 전체 자릿수는 항상 잘리고(반올림되지 않음) 오버플로로 인해 지원되지 않는 변환 오류가 발생합니다. 예를 들어, 원본 정수 열에 대해 "1.9999" 값으로 <b>updateDecimal</b>을 사용하면 대상 열 값이 "1"이 됩니다. 하지만 "3000000000"을 전달하면 드라이버에서 오류가 발생합니다.<br />
        </li><li>
          
            <b>데이터 의존(z)</b>: Java <b>String</b> 유형을 원본 SQL Server 데이터 형식으로 변환하는 경우 드라이버는 <b>String</b> 값을 SQL Server로 전달하고 SQL Server는 필요한 경우 변환을 수행합니다. <b>sendStringParametersAsUnicode</b> 연결 속성이 true로 설정되어 있고 원본 SQL Server 데이터 형식이 <b>image</b>인 경우 SQL Server는 <b>nvarchar</b>에서 <b>image</b>로의 변환을 허용하지 않으며 SQLServerException이 발생합니다. <b>sendStringParametersAsUnicode</b>가 false로 설정되어 있고 원본 SQL Server 데이터 형식이 <b>image</b>인 경우 SQL Server는 <b>varchar</b>에서 <b>image</b>로의 변환을 허용하며 예외가 발생하지 않습니다.<br />
        </li></ul>
      <p xmlns="">
        SQL Server는 대량 설정 변환을 수행하고 문제가 발생하면 JDBC 드라이버에 오류를 전달합니다. 하지만 클라이언트측 변환은 예외이며, 값이 <b>date</b>, <b>time</b>, <b>timestamp</b>, <b>Boolean</b> 및 <b>String</b>인 경우에만 수행됩니다.</p>
      <p xmlns="">SQL Server 열 데이터 형식이 <b>XML</b>인 경우 데이터 값은 올바른 <b>XML</b>이어야 합니다. setObject(byte[], SQLXML), setObject(inputStream, SQLXML) 또는 setObject(Blob, SQLXML) 메서드를 호출하는 경우 데이터 값은 XML 문자의 16진수 문자열 표현이어야 합니다. 예를 들면 다음과 같습니다. </p>
      <div class="sampleCode" xmlns=""><span codeLanguage="other"><pre>&lt;hello&gt;world&lt;/hello&gt; = 0x3C68656C6C6F3E776F726C643C2F68656C6C6F3E </pre></span></div>
      <p xmlns="">XML 문자가 특정 문자 인코딩을 사용하는 경우에는 BOM(바이트 순서 표시)이 필요합니다.</p>
    </content></div><span id="seeAlsoSpan"><h1 class="heading">참고 항목</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection"><a href="7802328d-4d23-4775-9573-4169b127d258.htm">JDBC 드라이버 데이터 형식 이해</a><br /><br /></div><!--[if gte IE 5]>
			<tool:tip element="seeAlsoToolTip" avoidmouse="false"/><tool:tip element="languageFilterToolTip" avoidmouse="false"/><tool:tip element="roleInfoSpan" avoidmouse="false"/>
		<![endif]-->
      <div id="footer" class="section">
        
		<hr />
		
		<span id="fb" class="feedbackcss">
			
			
		</span>
		
		<a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">
			
			© 2010 Microsoft Corporation. 모든 권리 보유.
		</a>
 	
	
      </div>
    </div>
  </body>
</html>